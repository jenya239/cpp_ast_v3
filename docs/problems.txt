üîç –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Aurora

=== –°–¢–ê–¢–£–° –û–ë–ù–û–í–õ–Å–ù: 2025-10-24 ===
‚úÖ = –ò–°–ü–†–ê–í–õ–ï–ù–û
üîÑ = –í –ü–†–û–¶–ï–°–°–ï
‚ùå = –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–û

‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

‚úÖ 1. –°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤ - —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏ —Ö—Ä—É–ø–∫–∞—è [–ò–°–ü–†–ê–í–õ–ï–ù–û]
–ü—Ä–æ–±–ª–µ–º–∞: –¢–∏–ø—ã —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ 3+ –º–µ—Å—Ç–∞—Ö –±–µ–∑ –µ–¥–∏–Ω–æ–π —Ç–æ—á–∫–∏ –∏—Å—Ç–∏–Ω—ã:
@type_table –≤ FunctionTransformer
@type_map –≤ CppLowering
Hardcoded –º–∞–ø–ø–∏–Ω–≥–∏ –≤ STDLIB_FUNCTIONS
Type inference –≤ TypeInference module
–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–±–ª–µ–º—ã:
# –í FunctionTransformer —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Event
@type_table['Event'] = CoreIR::RecordType.new(...)

# –í CppLowering –Ω—É–∂–Ω–æ –í–†–£–ß–ù–£–Æ –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥
@type_map['Event'] = 'aurora::graphics::Event'

# STDLIB_FUNCTIONS —Ç—Ä–µ–±—É–µ—Ç –í–†–£–ß–ù–£–Æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é
'is_quit_event' => 'aurora::graphics::is_quit_event'
–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ 3-4 –º–µ—Å—Ç–∞—Ö
–õ–µ–≥–∫–æ –∑–∞–±—ã—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ ‚Üí runtime –æ—à–∏–±–∫–∏
–ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

‚úÖ –†–ï–®–ï–ù–ò–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û (2025-10-24):
–°–æ–∑–¥–∞–Ω TypeRegistry (lib/aurora/type_registry.rb) - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ C++ namespace mapping (Graphics ‚Üí aurora::graphics)
–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å @type_table –∏ @type_map
TypeRegistry –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ToCore –∏ CppLowering
–¢–µ—Å—Ç—ã: 171/171 –ø—Ä–æ—Ö–æ–¥—è—Ç, –Ω–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–π
‚úÖ 2. Member access —á–µ—Ä–µ–∑ —Ö–µ–ª–ø–µ—Ä—ã - –∫–æ—Å—Ç—ã–ª—å –≤–º–µ—Å—Ç–æ —Ä–µ—à–µ–Ω–∏—è [–ò–°–ü–†–ê–í–õ–ï–ù–û]
–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ:
// –í—ã–Ω—É–∂–¥–µ–Ω—ã –ø–∏—Å–∞—Ç—å —Ö–µ–ª–ø–µ—Ä—ã!
fn get_button(evt: Event) -> i32 = evt.button
fn get_x(evt: Event) -> i32 = evt.x
fn get_y(evt: Event) -> i32 = evt.y

// –ü–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
let button = get_button(evt)  // –≤–º–µ—Å—Ç–æ evt.button
–ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –°–º–æ—Ç—Ä–∏–º type_inference.rb:200-213:
def infer_member_type(object_type, member)
  # –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å type –≤ @type_table
  if object_type.respond_to?(:name) && @type_table.key?(object_type.name)
    resolved_type = @type_table[object_type.name]
    return infer_member_type(resolved_type, member) if resolved_type != object_type
  end
  
  if object_type.record?
    field = object_type.fields.find { |f| f[:name] == member }
    # ...
–ü—Ä–æ–±–ª–µ–º–∞:
–ö–æ–≥–¥–∞ evt –∏–º–µ–µ—Ç —Ç–∏–ø Event (–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏), object_type –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º Type, –∞ –Ω–µ RecordType
Type lookup —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø –≤ @type_table –ò –ø—Ä–∞–≤–∏–ª—å–Ω–æ resolved
–•—Ä—É–ø–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

‚úÖ –†–ï–®–ï–ù–ò–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û (2025-10-24):
TypeRegistry.resolve_member(type_name, member) - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π member resolution
TypeInference –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TypeRegistry –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø evt.button, evt.x, evt.y —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ö–µ–ª–ø–µ—Ä–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤ examples/03_interactive_demo.aur
‚úÖ 3. –°–∏–Ω—Ç–∞–∫—Å–∏—Å - –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–π –∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è [–ò–°–ü–†–ê–í–õ–ï–ù–û]
–°—Ç–∞—Ä—ã–π –∫–æ–¥:
if is_quit_event(evt) then do
  println("Quitting");
  running = false;
  0
end else do
  0
end
–ü—Ä–æ–±–ª–µ–º—ã:
then do ... end - –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å (–º–æ–∂–Ω–æ then ... end)
else do 0 end - –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞
–ö–∞–∂–¥—ã–π if —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–∂–µ –¥–ª—è side-effects

‚úÖ –†–ï–®–ï–ù–ò–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û (2025-10-24):
'do' —Å—Ç–∞–ª –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º: if condition then action()
'else' –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω –¥–ª—è side-effect if –≤—ã—Ä–∞–∂–µ–Ω–∏–π
–ß–∏—Å—Ç—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –±–µ–∑ dummy –∑–Ω–∞—á–µ–Ω–∏–π

–ù–æ–≤—ã–π –∫–æ–¥:
if is_quit_event(evt) then running = false;
// –ò–ª–∏ —Å –±–ª–æ–∫–æ–º:
if evt.button > 0 then do
  x = to_f32(evt.x);
  y = to_f32(evt.y)
end

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —è–∑—ã–∫–∞–º–∏:
// Rust
if is_quit_event(evt) {
    println!("Quitting");
    running = false;
}

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è Aurora –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å:
if is_quit_event(evt) then
  println("Quitting")
  running = false
end
‚úÖ 4. Expression vs Statement confusion [–ò–°–ü–†–ê–í–õ–ï–ù–û]
–°—Ç–∞—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞:
// –í—ã–Ω—É–∂–¥–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0 –∏–∑ if
if condition then do
  side_effect();
  0  // <-- –∑–∞—á–µ–º?!
end else do
  0  // <-- –∑–∞—á–µ–º?!
end
–ü—Ä–∏—á–∏–Ω–∞: Aurora –ø—ã—Ç–∞–µ—Ç—Å—è –±—ã—Ç—å expression-based, –Ω–æ:
If —Ç—Ä–µ–±—É–µ—Ç –æ–±–µ –≤–µ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
–ù–æ —á–∞—Å—Ç–æ if –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è side-effects
–ù–µ—Ç unit —Ç–∏–ø–∞ (–∫–∞–∫ –≤ Rust/ML)

‚úÖ –†–ï–®–ï–ù–ò–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û (2025-10-24):
–í–≤–µ–¥—ë–Ω –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π unit type ():
  - AST::UnitLit –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ (–∑–∞–º–µ–Ω–∏–ª dummy IntLit(0))
  - CoreIR::UnitLiteral –∏ CoreIR::UnitType
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ unit type –¥–ª—è if –±–µ–∑ else
  - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ should_lower_as_statement?()
  - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å—Ç—ã—Ö C++ if statements –≤–º–µ—Å—Ç–æ ternary

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
  - –£–¥–∞–ª—ë–Ω hack —Å origin.nil? –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ dummy –ª–∏—Ç–µ—Ä–∞–ª–æ–≤
  - –ü–∞—Ä—Å–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —è–≤–Ω—ã–π UnitLit –≤–º–µ—Å—Ç–æ IntLit(0)
  - Lowering –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç unit type –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
‚úÖ 5. Import system - —Ä—É—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–∑–¥–µ [–ò–°–ü–†–ê–í–õ–ï–ù–û 2025-10-24]

–°—Ç–∞—Ä–∞—è –ø—Ä–æ–±–ª–µ–º–∞:
# lib/aurora/stdlib_resolver.rb
STDLIB_MODULES = {
  'Graphics' => 'graphics.aur'  # –¥–æ–±–∞–≤–∏–ª–∏
}

# lib/aurora/backend/cpp_lowering.rb
@type_map = {
  'Event' => 'aurora::graphics::Event'  # –¥–æ–±–∞–≤–∏–ª–∏ –≤—Ä—É—á–Ω—É—é
}

STDLIB_FUNCTIONS = {
  'is_quit_event' => 'aurora::graphics::is_quit_event'  # –¥–æ–±–∞–≤–∏–ª–∏ –≤—Ä—É—á–Ω—É—é
}
–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:
–ó–∞–±—ã–ª –¥–æ–±–∞–≤–∏—Ç—å –≤ STDLIB_MODULES ‚Üí import –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
–ó–∞–±—ã–ª –¥–æ–±–∞–≤–∏—Ç—å –≤ @type_map ‚Üí C++ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
–ó–∞–±—ã–ª –¥–æ–±–∞–≤–∏—Ç—å –≤ STDLIB_FUNCTIONS ‚Üí undefined function

‚úÖ –†–ï–®–ï–ù–ò–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û - StdlibScanner:
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ lib/aurora/stdlib/
  - –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö .aur —Ñ–∞–π–ª–æ–≤
  - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π (export fn –∏ extern fn)
  - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ (opaque –∏ record)
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π namespace mapping (Math ‚Üí aurora::math)
  - –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã: .aur —Ñ–∞–π–ª

–†–µ–∞–ª–∏–∑–∞—Ü–∏—è:
  - lib/aurora/stdlib_scanner.rb (210 lines) - —è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
  - lib/aurora/stdlib_resolver.rb - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scanner
  - lib/aurora/backend/cpp_lowering.rb - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scanner
  - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: fallback –Ω–∞ hardcoded constants

–¢–µ—Å—Ç—ã: 23 tests, 109 assertions, 100% pass, 0 regressions
–ú–æ–¥—É–ª–∏: Math, Graphics, IO, Conv, String, File, JSON - –≤—Å–µ —Ä–∞–±–æ—Ç–∞—é—Ç
‚úÖ 6. Opaque types - ad-hoc —Ä–µ—à–µ–Ω–∏–µ [–ò–°–ü–†–ê–í–õ–ï–ù–û 2025-10-24]

‚úÖ –†–ï–®–ï–ù–ò–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û:
–°–∏–Ω—Ç–∞–∫—Å–∏—Å:
  export type Window           // Opaque type –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  export type Event = { ... }  // –û–±—ã—á–Ω—ã–π record type

–†–µ–∞–ª–∏–∑–∞—Ü–∏—è:
  - AST::OpaqueType —É–∑–µ–ª (–≤–º–µ—Å—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ PrimType)
  - CoreIR::OpaqueType —Å –º–µ—Ç–æ–¥–æ–º opaque?()
  - TypeRegistry –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç '*' –¥–ª—è opaque types
  - Namespace qualified: aurora::graphics::Window*
  - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤ TypeRegistry (–Ω–µ —Ç–æ–ª—å–∫–æ stdlib)
  - 7 –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤—Å—ë

–¢–µ—Å—Ç—ã: All pass, 0 regressions
7. Const –¥–ª—è pointers - —Ö–∞–∫ –≤ codegen
–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ:
is_pointer = type_str.end_with?("*")
prefix = (stmt.mutable || is_pointer) ? "" : "const "
–ü—Ä–æ–±–ª–µ–º–∞:
String-based –ø—Ä–æ–≤–µ—Ä–∫–∞ end_with?("*") - —Ö—Ä—É–ø–∫–æ
–°–µ–º–∞–Ω—Ç–∏–∫–∞ const –¥–ª—è pointers —Ä–∞–∑–º—ã—Ç–∞
–ù–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É const T* –∏ T* const
üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å–ª–∞–±–æ—Å—Ç–∏
8. Type checking —Ä–∞–∑–±—Ä–æ—Å–∞–Ω –ø–æ –º–æ–¥—É–ª—è–º
TypeInference (type_inference.rb)
  ‚îú‚îÄ‚îÄ infer_member_type
  ‚îú‚îÄ‚îÄ ensure_compatible_type
  ‚îî‚îÄ‚îÄ type_error

FunctionTransformer (function_transformer.rb)
  ‚îú‚îÄ‚îÄ @type_table
  ‚îú‚îÄ‚îÄ register_stdlib_imports
  ‚îî‚îÄ‚îÄ transform_type

BaseTransformer (base_transformer.rb)
  ‚îú‚îÄ‚îÄ @var_types
  ‚îî‚îÄ‚îÄ type_name

CppLowering (cpp_lowering.rb)
  ‚îú‚îÄ‚îÄ @type_map
  ‚îî‚îÄ‚îÄ map_type
–ù–µ—Ç –µ–¥–∏–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è type system logic
9. Stdlib integration - manual everywhere
–ö–∞–∂–¥—ã–π stdlib –º–æ–¥—É–ª—å —Ç—Ä–µ–±—É–µ—Ç:
–î–æ–±–∞–≤–∏—Ç—å –≤ STDLIB_MODULES
–°–æ–∑–¥–∞—Ç—å .aur —Ñ–∞–π–ª
–°–æ–∑–¥–∞—Ç—å .hpp —Ñ–∞–π–ª —Å runtime
–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ STDLIB_FUNCTIONS
–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Ç–∏–ø –≤ @type_map
–ï—Å–ª–∏ extern - —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ .hpp
6 —à–∞–≥–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è!
üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Unified Type System
class TypeRegistry
  def register_type(name, definition, namespace: nil)
    @types[name] = TypeInfo.new(
      ast: definition,
      core_ir: transform(definition),
      cpp_name: cpp_qualified_name(name, namespace),
      namespace: namespace
    )
  end
  
  def resolve_member(type_name, member)
    # Single source of truth –¥–ª—è member access
  end
end
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä
// –ö–æ—Ä–æ—Ç–∫–∏–π if –¥–ª—è side-effects
if condition then
  action()
end

// –ò–ª–∏ –¥–∞–∂–µ
if condition: action()

// Expression if —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º unit
let result = if condition then value end
// else –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ()

// –ö–æ—Ä–æ—Ç–∫–∏–π while
while running:
  tick()
end
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: Auto-discovery stdlib
class StdlibScanner
  def scan_module(path)
    ast = parse(path)
    ModuleInfo.new(
      types: extract_exported_types(ast),
      functions: extract_exported_functions(ast),
      namespace: infer_namespace(path)
    )
  end
end
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: Proper opaque types
// –í —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ
export opaque type Window
export opaque type DrawContext

// –í AST
class OpaqueType < Type
  attr_reader :name, :as_pointer
end

// –í codegen
def map_type(type)
  case type
  when OpaqueType
    cpp_name = namespace_qualified(type.name)
    type.as_pointer ? "#{cpp_name}*" : cpp_name
  end
end
üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

=== –°–¢–ê–¢–£–° –ù–ê 2025-10-24 ===

‚úÖ –í–´–ü–û–õ–ù–ï–ù–û - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–∫—Ä–∏—Ç–∏—á–Ω–æ):
1. ‚úÖ –°–æ–∑–¥–∞—Ç—å TypeRegistry - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã –¥–ª—è —Ç–∏–ø–æ–≤
2. ‚úÖ –£–ø—Ä–æ—Å—Ç–∏—Ç—å if/while —Å–∏–Ω—Ç–∞–∫—Å–∏—Å - —É–±—Ä–∞—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ do
3. ‚úÖ –í–≤–µ—Å—Ç–∏ unit type () –¥–ª—è void expressions
4. ‚úÖ Member access –¥–æ–ª–∂–µ–Ω –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ö–µ–ª–ø–µ—Ä–æ–≤

‚ùå TODO - –°–∫–æ—Ä–æ (–≤–∞–∂–Ω–æ):
5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π scan stdlib modules
6. Proper opaque type support –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ

‚ùå TODO - –ü–æ—Ç–æ–º (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ):
7. Pattern matching –¥–ª—è records
8. Type aliases –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
9. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è bindings –∏–∑ .hpp
üìù –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞

‚úÖ –§–∞–∑–∞ 1: Type System Unification [–í–´–ü–û–õ–ù–ï–ù–û 2025-10-24]
‚úÖ –°–æ–∑–¥–∞–Ω lib/aurora/type_registry.rb
‚úÖ @type_table, @type_map –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ TypeRegistry
‚úÖ –ï–¥–∏–Ω—ã–π API –¥–ª—è type resolution
‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞

‚úÖ –§–∞–∑–∞ 2: Syntax Improvements [–í–´–ü–û–õ–ù–ï–ù–û 2025-10-24]
‚úÖ do –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω –ø–æ—Å–ª–µ then
‚úÖ Trailing expressions –±–µ–∑ —è–≤–Ω–æ–≥–æ return (unit type)
‚úÖ Unit type support –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
‚úÖ –ü–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AST::UnitLit –≤–º–µ—Å—Ç–æ dummy IntLit(0)

‚ùå –§–∞–∑–∞ 3: Stdlib Automation [TODO]
StdlibScanner –¥–ª—è auto-discovery
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è STDLIB_FUNCTIONS –∏–∑ .aur —Ñ–∞–π–ª–æ–≤
Convention-based namespace mapping

=== –î–ï–¢–ê–õ–ò –†–ï–ê–õ–ò–ó–ê–¶–ò–ò (2025-10-24) ===

–§–∞–π–ª—ã –∏–∑–º–µ–Ω–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã:
1. lib/aurora/type_registry.rb - NEW (237 —Å—Ç—Ä–æ–∫)
   - TypeInfo class —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–∞—Ö
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π C++ namespace mapping
   - Member resolution —á–µ—Ä–µ–∑ TypeRegistry

2. lib/aurora/ast/nodes.rb (+9 —Å—Ç—Ä–æ–∫)
   - AST::UnitLit –∫–ª–∞—Å—Å –¥–ª—è unit –ª–∏—Ç–µ—Ä–∞–ª–æ–≤

3. lib/aurora/core_ir/nodes.rb (+11 —Å—Ç—Ä–æ–∫)
   - CoreIR::UnitLiteral –∏ CoreIR::UnitType
   - unit? –º–µ—Ç–æ–¥ –¥–ª—è Type

4. lib/aurora/core_ir/builder.rb (+4 —Å—Ç—Ä–æ–∫–∏)
   - unit_type() –∏ unit_literal() builders

5. lib/aurora/parser/expression_parser.rb (10 –∑–∞–º–µ–Ω)
   - IntLit(0) ‚Üí UnitLit() –≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç–∞—Ö
   - parse_if_branch_expression - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö statements

6. lib/aurora/passes/to_core/expression_transformer.rb (+3 —Å—Ç—Ä–æ–∫–∏)
   - –û–±—Ä–∞–±–æ—Ç–∫–∞ AST::UnitLit ‚Üí CoreIR::UnitLiteral

7. lib/aurora/backend/cpp_lowering/base_lowerer.rb (+7 —Å—Ç—Ä–æ–∫)
   - should_lower_as_statement?() helper

8. lib/aurora/backend/cpp_lowering/expression_lowerer.rb
   - –£–¥–∞–ª—ë–Ω hack —Å origin.nil?
   - –ó–∞—â–∏—Ç–∞ –æ—Ç unit type –≤ expression context

9. lib/aurora/backend/cpp_lowering/statement_lowerer.rb
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ should_lower_as_statement?()

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
‚úÖ 171/171 —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç (99.4%)
‚úÖ –ù–µ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–π
‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
‚úÖ –ö–æ–¥ —á–∏—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ