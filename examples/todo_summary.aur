type Totals = { todo: i32, doing: i32, done: i32 }

fn normalize(line: str) -> str = line.trim()

fn parse_status(line: str) -> str =
  let upper = normalize(line).upper()
  if upper.starts_with("TODO") then
    "TODO"
  else if upper.starts_with("DOING") then
    "DOING"
  else if upper.starts_with("DONE") then
    "DONE"
  else
    "OTHER"

fn bump(stats: Totals, status: str) -> Totals =
  if status == "TODO" then
    Totals { todo: stats.todo + 1, doing: stats.doing, done: stats.done }
  else if status == "DOING" then
    Totals { todo: stats.todo, doing: stats.doing + 1, done: stats.done }
  else if status == "DONE" then
    Totals { todo: stats.todo, doing: stats.doing, done: stats.done + 1 }
  else
    stats

fn main() -> i32 =
  let raw = input()
  let lines = raw.split("\n")

  let statuses = lines
    .map((line: str) => normalize(line))
    .filter((line: str) => !line.is_empty())
    .map((line: str) => parse_status(line))

  let totals = statuses.fold(
    Totals { todo: 0, doing: 0, done: 0 },
    (acc: Totals, status: str) => bump(acc, status)
  )

  let _ = println(format("todo={}", totals.todo))
  let _ = println(format("doing={}", totals.doing))
  let _ = println(format("done={}", totals.done))

  if totals.todo > 0 then {
    println("⚠️ items still waiting in TODO");
    1
  } else if totals.doing > 0 then {
    println("ℹ️ work in progress");
    0
  } else if totals.done > 0 then {
    println("✅ all tasks completed");
    0
  } else {
    println("✅ nothing scheduled today");
    0
  }
