#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../../lib/cpp_ast"
require_relative "../../lib/cpp_ast/builder/dsl_v2"

include CppAst::Builder::DSLv2

puts "=== DSL v2: Aurora/XQR Syntax ==="
puts "Demonstrating Aurora language syntax over CppAst"
puts

# Example 1: Basic Aurora syntax
puts "=== Example 1: Basic Aurora Syntax ==="
puts "Aurora source:"
aurora_source = <<~AURORA
  module app/geom
  
  type Vec2 = { x: f32, y: f32 }
  
  fn length(v: Vec2) -> f32 =
    (v.x*v.x + v.y*v.y).sqrt()
  
  fn scale(v: Vec2, k: f32) -> Vec2 =
    { x: v.x*k, y: v.y*k }
  
  fn distance(p1: Vec2, p2: Vec2) -> f32 =
    let dx = p2.x - p1.x
    let dy = p2.y - p1.y
    (dx*dx + dy*dy).sqrt()
AURORA

puts aurora_source
puts

# Convert to DSL v2
puts "Equivalent DSL v2:"
ast = program do
  namespace :app do
    namespace :geom do
      # Vec2 struct
      struct_ :Vec2 do
        field :x, t.f32
        field :y, t.f32
        
        # Constructor
        ctor params: [[:f32, :x], [:f32, :y]], 
             constexpr: true, 
             noexcept: true do
          id(:self).member(:x) = id(:x)
          id(:self).member(:y) = id(:y)
        end
        
        # Copy constructor
        ctor params: [[t.ref(:Vec2, const: true), :other]], 
             constexpr: true, 
             noexcept: true do
          id(:self).member(:x) = id(:other).member(:x)
          id(:self).member(:y) = id(:other).member(:y)
        end
        
        # Move constructor
        ctor params: [[t.ref(:Vec2, mutable: true), :other]], 
             constexpr: true, 
             noexcept: true do
          id(:self).member(:x) = id(:other).member(:x)
          id(:self).member(:y) = id(:other).member(:y)
        end
        
        # Assignment operator
        def_ :operator=, 
             params: [[t.ref(:Vec2, const: true), :other]], 
             ret: t.ref(:Vec2),
             constexpr: true, 
             noexcept: true do
          id(:self).member(:x) = id(:other).member(:x)
          id(:self).member(:y) = id(:other).member(:y)
          ret id(:self)
        end
        
        # Move assignment operator
        def_ :operator=, 
             params: [[t.ref(:Vec2, mutable: true), :other]], 
             ret: t.ref(:Vec2),
             constexpr: true, 
             noexcept: true do
          id(:self).member(:x) = id(:other).member(:x)
          id(:self).member(:y) = id(:other).member(:y)
          ret id(:self)
        end
        
        # Destructor
        dtor noexcept: true do
          # Nothing to do
        end
      end
      
      # length function
      fn :length, 
         params: [[t.ref(:Vec2, const: true), :v]], 
         ret: t.f32,
         constexpr: true, 
         noexcept: true do
        ret (id(:v).member(:x) * id(:v).member(:x) + 
             id(:v).member(:y) * id(:v).member(:y)).call(:sqrt)
      end
      
      # scale function
      fn :scale, 
         params: [[t.ref(:Vec2, const: true), :v], [:f32, :k]], 
         ret: t.Vec2,
         constexpr: true, 
         noexcept: true do
        ret call(:Vec2, 
                 id(:v).member(:x) * id(:k), 
                 id(:v).member(:y) * id(:k))
      end
      
      # distance function
      fn :distance, 
         params: [[t.ref(:Vec2, const: true), :p1], [t.ref(:Vec2, const: true), :p2]], 
         ret: t.f32,
         constexpr: true, 
         noexcept: true do
        let_ :dx, id(:p2).member(:x) - id(:p1).member(:x)
        let_ :dy, id(:p2).member(:y) - id(:p1).member(:y)
        ret (id(:dx) * id(:dx) + id(:dy) * id(:dy)).call(:sqrt)
      end
    end
  end
end

puts ast.to_node.to_source
puts

# Example 2: Sum types and pattern matching
puts "=== Example 2: Sum Types and Pattern Matching ==="
puts "Aurora source:"
aurora_source = <<~AURORA
  type Shape = 
    | Circle { r: f32 }
    | Rect { w: f32, h: f32 }
    | Polygon { points: Vec2[] }
  
  fn area(s: Shape) -> f32 =
    match s
      | Circle{r} => 3.14159 * r * r
      | Rect{w,h} => w * h
      | Polygon{points} => 0.0  // Simplified
AURORA

puts aurora_source
puts

# Convert to DSL v2
puts "Equivalent DSL v2:"
ast = program do
  namespace :app do
    namespace :geom do
      # Circle struct
      struct_ :Circle do
        field :r, t.f32
        
        ctor params: [[:f32, :r]], constexpr: true, noexcept: true do
          id(:self).member(:r) = id(:r)
        end
        
        rule_of_five!
      end
      
      # Rect struct
      struct_ :Rect do
        field :w, t.f32
        field :h, t.f32
        
        ctor params: [[:f32, :w], [:f32, :h]], constexpr: true, noexcept: true do
          id(:self).member(:w) = id(:w)
          id(:self).member(:h) = id(:h)
        end
        
        rule_of_five!
      end
      
      # Polygon struct
      struct_ :Polygon do
        field :points, t.vec(t.Vec2)
        
        ctor params: [[t.vec(t.Vec2), :points]], constexpr: true, noexcept: true do
          id(:self).member(:points) = id(:points)
        end
        
        rule_of_five!
      end
      
      # Shape variant
      type_alias :Shape, t.variant(t.Circle, t.Rect, t.Polygon)
      
      # area function with pattern matching
      fn :area, 
         params: [[t.Shape, :s]], 
         ret: t.f32,
         noexcept: true do
        match_ id(:s) do
          case_ t.Circle, [:r] do
            ret float(3.14159) * id(:r) * id(:r)
          end
          case_ t.Rect, [:w, :h] do
            ret id(:w) * id(:h)
          end
          case_ t.Polygon, [:points] do
            ret float(0.0)  # Simplified
          end
        end
      end
    end
  end
end

puts ast.to_node.to_source
puts

# Example 3: Pipe operators
puts "=== Example 3: Pipe Operators ==="
puts "Aurora source:"
aurora_source = <<~AURORA
  fn process_data(data: f32[]) -> f32[] =
    data
      |> filter(x => x > 0.0)
      |> map(x => x * 2.0)
      |> sort()
AURORA

puts aurora_source
puts

# Convert to DSL v2
puts "Equivalent DSL v2:"
ast = program do
  namespace :app do
    namespace :geom do
      # process_data function
      fn :process_data, 
         params: [[t.span(t.f32), :data]], 
         ret: t.vec(t.f32),
         noexcept: true do
        let_ :result, id(:data)
        id(:result) = id(:result).call(:filter, lambda params: [[:f32, :x]], ret: t.bool do
          ret id(:x) > float(0.0)
        end)
        id(:result) = id(:result).call(:map, lambda params: [[:f32, :x]], ret: t.f32 do
          ret id(:x) * float(2.0)
        end)
        id(:result) = id(:result).call(:sort)
        ret id(:result)
      end
    end
  end
end

puts ast.to_node.to_source
puts

# Example 4: Result types
puts "=== Example 4: Result Types ==="
puts "Aurora source:"
aurora_source = <<~AURORA
  type ParseError = enum { Empty, BadChar }
  
  fn parse_i32(s: str) -> Result<i32, ParseError> =
    if s.len == 0 then Err(Empty)
    else if !all_digits(s) then Err(BadChar)
    else Ok(to_i32(s))
  
  fn safe_divide(a: f32, b: f32) -> Result<f32, str> =
    if b == 0.0 then Err("Division by zero")
    else Ok(a / b)
AURORA

puts aurora_source
puts

# Convert to DSL v2
puts "Equivalent DSL v2:"
ast = program do
  namespace :app do
    namespace :geom do
      # ParseError enum
      enum_class :ParseError, t.uint8 do
        enumerator :Empty, value: int(0)
        enumerator :BadChar, value: int(1)
      end
      
      # parse_i32 function
      fn :parse_i32, 
         params: [[t.string, :s]], 
         ret: t.result(t.i32, t.ParseError),
         noexcept: true do
        if_ id(:s).call(:len) == int(0) do
          ret err(call(:ParseError, :Empty))
        elsif id(:s).call(:all_digits) == bool(false) do
          ret err(call(:ParseError, :BadChar))
        else_
          ret ok(id(:s).call(:to_i32))
        end
      end
      
      # safe_divide function
      fn :safe_divide, 
         params: [[:f32, :a], [:f32, :b]], 
         ret: t.result(t.f32, t.string),
         noexcept: true do
        if_ id(:b) == float(0.0) do
          ret err(string("Division by zero"))
        else_
          ret ok(id(:a) / id(:b))
        end
      end
    end
  end
end

puts ast.to_node.to_source
puts

puts "=== Features demonstrated ==="
puts "âœ… Aurora syntax â†’ DSL v2 conversion"
puts "âœ… Sum types with pattern matching"
puts "âœ… Pipe operators and function composition"
puts "âœ… Result types for error handling"
puts "âœ… Let bindings and local variables"
puts "âœ… Pattern matching with guards"
puts "âœ… Type aliases and variants"
puts "âœ… Enum classes with values"
puts

puts "Demo completed successfully! ðŸŽ‰"
