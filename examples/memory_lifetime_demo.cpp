// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ Aurora
// –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å: g++ -std=c++11 -o memory_demo memory_lifetime_demo.cpp
// –ó–∞–ø—É—Å—Ç–∏—Ç—å: ./memory_demo

#include <iostream>
#include <vector>

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤/–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
class TrackedInt {
public:
    int value;
    static int alive_count;

    TrackedInt(int v) : value(v) {
        alive_count++;
        std::cout << "  [+] –°–æ–∑–¥–∞–Ω TrackedInt(" << value << "), –≤—Å–µ–≥–æ –∂–∏–≤—ã—Ö: " << alive_count << "\n";
    }

    TrackedInt(const TrackedInt& other) : value(other.value) {
        alive_count++;
        std::cout << "  [C] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω TrackedInt(" << value << "), –≤—Å–µ–≥–æ –∂–∏–≤—ã—Ö: " << alive_count << "\n";
    }

    ~TrackedInt() {
        alive_count--;
        std::cout << "  [-] –£–Ω–∏—á—Ç–æ–∂–µ–Ω TrackedInt(" << value << "), –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏–≤—ã—Ö: " << alive_count << "\n";
    }
};

int TrackedInt::alive_count = 0;

void demo_basic_lifetime() {
    std::cout << "\n=== DEMO 1: –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ ===\n";

    {
        std::cout << "–°–æ–∑–¥–∞—ë–º vector...\n";
        std::vector<TrackedInt> arr{
            TrackedInt(1),
            TrackedInt(2),
            TrackedInt(3)
        };

        std::cout << "\nVector —Å–æ–∑–¥–∞–Ω, —ç–ª–µ–º–µ–Ω—Ç—ã –∂–∏–≤—ã\n";
        std::cout << "–†–∞–∑–º–µ—Ä: " << arr.size() << "\n";

        std::cout << "\n–í—ã—Ö–æ–¥–∏–º –∏–∑ scope...\n";
    } // <- –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä vector

    std::cout << "\n–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ scope\n";
    std::cout << "–û—Å—Ç–∞–ª–æ—Å—å –∂–∏–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " << TrackedInt::alive_count << "\n";
}

void demo_push_reallocation() {
    std::cout << "\n=== DEMO 2: Push –∏ —Ä–µ–∞–ª–ª–æ–∫–∞—Ü–∏—è ===\n";

    std::vector<TrackedInt> arr;
    arr.reserve(2);  // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –¥–ª—è 2 —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    std::cout << "Capacity: " << arr.capacity() << ", Size: " << arr.size() << "\n\n";

    std::cout << "Push 1:\n";
    arr.push_back(TrackedInt(1));
    std::cout << "Capacity: " << arr.capacity() << ", Size: " << arr.size() << "\n\n";

    std::cout << "Push 2:\n";
    arr.push_back(TrackedInt(2));
    std::cout << "Capacity: " << arr.capacity() << ", Size: " << arr.size() << "\n\n";

    std::cout << "Push 3 (–†–ï–ê–õ–õ–û–ö–ê–¶–ò–Ø!):\n";
    arr.push_back(TrackedInt(3));
    std::cout << "Capacity: " << arr.capacity() << ", Size: " << arr.size() << "\n";
    std::cout << "–ó–∞–º–µ—Ç—å: —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ—Ç–æ–º —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!\n\n";

    std::cout << "–í—ã—Ö–æ–¥–∏–º –∏–∑ scope...\n";
}

void demo_copy_vs_move() {
    std::cout << "\n=== DEMO 3: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ vs –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ===\n";

    {
        std::cout << "–°–æ–∑–¥–∞—ë–º arr1:\n";
        std::vector<TrackedInt> arr1{TrackedInt(10), TrackedInt(20)};

        std::cout << "\n–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (arr2 = arr1):\n";
        std::vector<TrackedInt> arr2 = arr1;
        std::cout << "–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –î–í–ê –º–∞—Å—Å–∏–≤–∞ —Å –∫–æ–ø–∏—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤!\n";
        std::cout << "arr1.size() = " << arr1.size() << ", arr2.size() = " << arr2.size() << "\n";

        std::cout << "\n–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (arr3 = std::move(arr1)):\n";
        std::vector<TrackedInt> arr3 = std::move(arr1);
        std::cout << "arr1 —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–π (–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤ arr3)\n";
        std::cout << "arr1.size() = " << arr1.size() << ", arr3.size() = " << arr3.size() << "\n";
        std::cout << "–ù–∏–∫–∞–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤!\n";

        std::cout << "\n–í—ã—Ö–æ–¥–∏–º –∏–∑ scope...\n";
    }

    std::cout << "\n–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞: " << TrackedInt::alive_count << " –∂–∏–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n";
}

void demo_nested_scopes() {
    std::cout << "\n=== DEMO 4: –í–ª–æ–∂–µ–Ω–Ω—ã–µ scope ===\n";

    std::cout << "–í–Ω–µ—à–Ω–∏–π scope:\n";
    std::vector<TrackedInt> outer{TrackedInt(100)};

    {
        std::cout << "\n  –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π scope 1:\n";
        std::vector<TrackedInt> inner1{TrackedInt(200), TrackedInt(201)};

        {
            std::cout << "\n    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π scope 2:\n";
            std::vector<TrackedInt> inner2{TrackedInt(300)};

            std::cout << "    –ñ–∏–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: " << TrackedInt::alive_count << "\n";
            std::cout << "    –í—ã—Ö–æ–¥ –∏–∑ scope 2...\n";
        }

        std::cout << "  –ü–æ—Å–ª–µ scope 2, –∂–∏–≤—ã—Ö: " << TrackedInt::alive_count << "\n";
        std::cout << "  –í—ã—Ö–æ–¥ –∏–∑ scope 1...\n";
    }

    std::cout << "–ü–æ—Å–ª–µ scope 1, –∂–∏–≤—ã—Ö: " << TrackedInt::alive_count << "\n";
    std::cout << "–í—ã—Ö–æ–¥ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ scope...\n";
}

// –≠–º—É–ª—è—Ü–∏—è Aurora –∫–æ–¥–∞
namespace Aurora {
    // fn create_array() -> i32 =
    //   let arr = [1, 2, 3, 4, 5];
    //   arr.length()
    int create_array() {
        std::cout << "\n=== AURORA: create_array() ===\n";
        std::vector<int> arr = std::vector<int>{1, 2, 3, 4, 5};
        std::cout << "Array —Å–æ–∑–¥–∞–Ω –Ω–∞ heap —á–µ—Ä–µ–∑ std::vector\n";
        std::cout << "–†–∞–∑–º–µ—Ä: " << arr.size() << "\n";

        int result = arr.size();

        std::cout << "–í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ - –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä vector –æ—Å–≤–æ–±–æ–¥–∏—Ç –ø–∞–º—è—Ç—å\n";
        return result;
    }

    // fn process_arrays() -> i32 =
    //   let arr1 = [1, 2, 3];
    //   let arr2 = [4, 5, 6];
    //   for x in arr1 do x;
    //   for y in arr2 do y;
    //   arr1.length() + arr2.length()
    int process_arrays() {
        std::cout << "\n=== AURORA: process_arrays() ===\n";
        std::vector<int> arr1 = std::vector<int>{1, 2, 3};
        std::vector<int> arr2 = std::vector<int>{4, 5, 6};

        std::cout << "–î–≤–∞ –º–∞—Å—Å–∏–≤–∞ —Å–æ–∑–¥–∞–Ω—ã\n";

        // for x in arr1 do x
        for (int x : arr1) {
            // x; (–ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
        }

        // for y in arr2 do y
        for (int y : arr2) {
            // y;
        }

        int result = arr1.size() + arr2.size();

        std::cout << "–í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏:\n";
        std::cout << "  1. arr2 —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è\n";
        std::cout << "  2. arr1 —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è\n";
        std::cout << "  3. –í—Å—è –ø–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞\n";

        return result;
    }
}

int main() {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    std::cout << "‚ïë  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–ú–Ø–¢–¨–Æ –í AURORA             ‚ïë\n";
    std::cout << "‚ïë  (—á–µ—Ä–µ–∑ std::vector –∏ RAII)                           ‚ïë\n";
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";

    demo_basic_lifetime();
    demo_push_reallocation();
    demo_copy_vs_move();
    demo_nested_scopes();

    std::cout << "\n" << "‚ïê" * 60 << "\n";
    Aurora::create_array();
    Aurora::process_arrays();

    std::cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    std::cout << "‚ïë  –ò–¢–û–ì                                                  ‚ïë\n";
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";
    std::cout << "\n‚úÖ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã\n";
    std::cout << "‚úÖ –í—Å—è –ø–∞–º—è—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞\n";
    std::cout << "‚úÖ –ù–∏–∫–∞–∫–∏—Ö —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏\n";
    std::cout << "‚úÖ –ù–∏–∫–∞–∫–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n";
    std::cout << "‚úÖ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è\n";
    std::cout << "\nüí° –≠—Ç–æ –∏ –µ—Å—Ç—å RAII - —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n";

    return 0;
}
