// Interactive graphics demo with event loop and mutable variables
// Click anywhere to move the green circle
// Press any key to quit

import {
  Event, is_quit_event,
  create_window, create_draw_context, flush_window,
  poll_event, clear, set_color, draw_circle, draw_text,
  rgb, sleep_ms
} from "Graphics"

import { to_f32 } from "Conv"

fn main() -> i32 = do
  println("=== Aurora Interactive Demo ===");
  println("Click anywhere to move the circle");
  println("Press any key to quit");

  let win = create_window(600, 400, "Aurora Interactive Demo - Click to Move");
  let ctx = create_draw_context(win);

  // Mutable state for circle position
  let mut x = 300.0;
  let mut y = 200.0;
  let mut running = true;
  let mut frame_count = 0;

  // Event loop - runs at ~60 FPS
  while running do
    let evt = poll_event(win);

    // Check for quit (any key press) - simplified syntax!
    if is_quit_event(evt) then running = false;

    // Update position on mouse click - direct member access!
    if evt.button > 0 then do
      x = to_f32(evt.x);
      y = to_f32(evt.y);
      println("Moved circle to: ");
      println(to_string(evt.x));
      println(to_string(evt.y))
    end;

    // Render frame
    clear(ctx, rgb(0.1, 0.1, 0.15));

    // Draw circle at current position
    set_color(ctx, rgb(0.2, 0.8, 0.4));
    draw_circle(ctx, x, y, 30.0);

    // Draw instructions
    set_color(ctx, rgb(1.0, 1.0, 1.0));
    draw_text(ctx, "Click anywhere to move the circle", 10.0, 30.0, 16.0);
    draw_text(ctx, "Press any key to quit", 10.0, 60.0, 16.0);

    // Draw frame counter
    set_color(ctx, rgb(0.7, 0.7, 0.7));
    draw_text(ctx, "Frame: ", 10.0, 380.0, 14.0);

    flush_window(win);
    sleep_ms(16);

    frame_count = frame_count + 1
  end;

  println("=== Demo Finished ===");
  println("Total frames rendered: ");
  println(to_string(frame_count));
  0
end
