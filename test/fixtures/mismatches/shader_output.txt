#pragma once

#include <epoxy/gl.h>
#include <string>
#include <optional>
#include <memory>
#include <span>

& operator=(const Shader&) = delete;

    // Move semantics
    Shader(Shader&& other) noexcept;
    & operator=(Shader&& other) noexcept;

    GLuint handle() const noexcept { return shader_; }
    bool is_valid() const noexcept { return shader_ != 0; }
    std::optional<std::string> compile_error() const;

private:
    GLuint shader_ = 0;
};

/**
 * RAII wrapper for OpenGL shader program
 */
& operator=(const ShaderProgram&) = delete;

    // Move semantics
    ShaderProgram(ShaderProgram&& other) noexcept;
    & operator=(ShaderProgram&& other) noexcept;

    void attach(const Shader& shader);
    bool link();
    void use() const;

    GLuint handle() const noexcept { return program_; }
    bool is_valid() const noexcept { return program_ != 0; }
    std::optional<std::string> link_error() const;

    // Uniform setters
    void set_uniform(const std::string& name, int value) const;
    void set_uniform(const std::string& name, float value) const;
    void set_uniform(const std::string& name, float x, float y, float z) const;
    void set_uniform(const std::string& name, std::span<const float> values) const;

private:
    GLuint program_ = 0;
};

} // namespace gtkgl::gl
