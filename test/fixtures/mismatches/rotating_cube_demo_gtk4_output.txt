#pragma once

#include "demos/demo_scene.hpp"
#include <epoxy/gl.h>
#include <array>
#include <memory>

default;
    override = default;

    // Scene lifecycle
    void on_realize(GtkGLArea* area) override;
    void on_unrealize(GtkGLArea* area) override;
    void on_render(GtkGLArea* area, GdkGLContext* context) override;

    // Scene metadata
    std::string name() const override { return "Вращающийся куб"; }
    std::string description() const override {
        return "3D куб с перспективой, градиентным освещением и плавным вращением";
    }
    std::string category() const override { return "3D"; }

    // Animation
    void update(float delta_time) override;
    void reset() override;
    void on_resize(int width, int height) override;

    // Mouse interaction
    void on_mouse_press(double x, double y);
    void on_mouse_release(double x, double y);
    void on_mouse_move(double x, double y);

private:
    struct Mat4 {
        std::array<float, 16> data{};

        static Mat4 identity();
        static Mat4 perspective(float fov, float aspect, float near, float far);
        static Mat4 rotation_xyz(float x, float y, float z);
        static Mat4 translation(float x, float y, float z);
        static Mat4 look_at(float eye_x, float eye_y, float eye_z,
                           float center_x, float center_y, float center_z,
                           float up_x, float up_y, float up_z);
        operator*(const Mat4& other) const;
    };

    void create_shaders();
    void create_geometry();
    void create_grid();
    void render_grid(const Mat4& view);
    void update_projection();

    GLuint vao_ = 0;
    GLuint vbo_ = 0;
    GLuint ebo_ = 0;
    GLuint program_ = 0;
    GLuint grid_vao_ = 0;
    GLuint grid_vbo_ = 0;
    GLuint grid_program_ = 0;

    float rotation_x_ = 0.0f;
    float rotation_y_ = 0.0f;
    float rotation_z_ = 0.0f;
    float time_ = 0.0f;

    Mat4 projection_;
    int frame_count_ = 0;

    // Camera control (orbit controller)
    float camera_yaw_ = 0.0f;           // Horizontal rotation
    float camera_pitch_ = 1.0f;         // Vertical angle (start at 45 degrees)
    float camera_distance_ = 6.0f;      // Distance from origin
    bool mouse_dragging_ = false;
    double last_mouse_x_ = 0.0;
    double last_mouse_y_ = 0.0;
};

} // namespace gtkgl::demos
