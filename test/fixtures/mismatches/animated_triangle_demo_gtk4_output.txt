#pragma once

#include "demos/demo_scene.hpp"
#include "gl/shader.hpp"
#include "gl/buffer.hpp"
#include <epoxy/gl.h>
#include <memory>

override = default;

    // Scene lifecycle
    void on_realize(GtkGLArea* area) override;
    void on_unrealize(GtkGLArea* area) override;
    void on_render(GtkGLArea* area, GdkGLContext* context) override;

    // Scene metadata
    std::string name() const override { return "Animated Triangle"; }
    std::string description() const override {
        return "Простой анимированный треугольник с движением и сменой цвета";
    }
    std::string category() const override { return "2D"; }

    // Animation
    void update(float delta_time) override;
    void reset() override;

private:
    void create_shaders();
    void create_geometry();

    GLuint vao_ = 0;
    GLuint vbo_ = 0;
    GLuint program_ = 0;
    float time_ = 0.0f;
    int frame_count_ = 0;
};

} // namespace gtkgl::demos
