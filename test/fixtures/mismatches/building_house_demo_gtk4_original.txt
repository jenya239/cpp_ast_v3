#pragma once

#include "demos/demo_scene.hpp"
#include <epoxy/gl.h>
#include <array>
#include <vector>
#include <memory>

namespace gtkgl::demos {

/**
 * Building house animation demo
 * Blocks fly in and assemble into a small house
 */
class BuildingHouseDemoGTK4 : public DemoScene {
public:
    BuildingHouseDemoGTK4() = default;
    ~BuildingHouseDemoGTK4() override = default;

    // Scene lifecycle
    void on_realize(GtkGLArea* area) override;
    void on_unrealize(GtkGLArea* area) override;
    void on_render(GtkGLArea* area, GdkGLContext* context) override;

    // Scene metadata
    std::string name() const override { return "Сборка домика"; }
    std::string description() const override {
        return "Анимация: блоки вылетают и собираются в домик";
    }
    std::string category() const override { return "3D"; }

    // Animation
    void update(float delta_time) override;
    void reset() override;
    void on_resize(int width, int height) override;

    // Mouse interaction
    void on_mouse_press(double x, double y);
    void on_mouse_release(double x, double y);
    void on_mouse_move(double x, double y);

private:
    struct Mat4 {
        std::array<float, 16> data{};

        static Mat4 identity();
        static Mat4 perspective(float fov, float aspect, float near, float far);
        static Mat4 rotation_y(float angle);
        static Mat4 translation(float x, float y, float z);
        static Mat4 scale(float s);
        static Mat4 look_at(float eye_x, float eye_y, float eye_z,
                           float center_x, float center_y, float center_z,
                           float up_x, float up_y, float up_z);
        Mat4 operator*(const Mat4& other) const;
    };

    struct Block {
        float target_x, target_y, target_z;  // Final position
        float current_x, current_y, current_z;  // Current position
        float r, g, b;  // Color
        float start_time;  // When to start moving
        bool arrived = false;
    };

    void create_shaders();
    void create_geometry();
    void create_grid();
    void setup_blocks();
    void update_projection();
    void render_block(const Block& block, const Mat4& view_proj);
    void render_grid(const Mat4& view_proj);

    GLuint vao_ = 0;
    GLuint vbo_ = 0;
    GLuint ebo_ = 0;
    GLuint program_ = 0;
    GLuint grid_vao_ = 0;
    GLuint grid_vbo_ = 0;
    GLuint grid_program_ = 0;

    Mat4 projection_;
    float time_ = 0.0f;
    int frame_count_ = 0;

    std::vector<Block> blocks_;
    float animation_duration_ = 15.0f;  // Full cycle duration

    // Camera control (orbit controller - same as cube)
    float camera_yaw_ = 0.0f;
    float camera_pitch_ = 1.0f;  // Vertical angle (start at 45 degrees)
    float camera_distance_ = 12.0f;
    bool mouse_dragging_ = false;
    bool auto_rotate_ = true;
    double last_mouse_x_ = 0.0;
    double last_mouse_y_ = 0.0;
};

} // namespace gtkgl::demos
