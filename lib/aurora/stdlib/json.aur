// JSON support module
// Provides JSON parsing and serialization

// JSON value type - can be any JSON type
export type JsonValue =
  | JsonNull
  | JsonBool(bool)
  | JsonNumber(f32)
  | JsonString(str)
  | JsonArray(JsonValue[])
  | JsonObject(str, JsonValue)  // TODO: Should be Map<str, JsonValue>

// Core parsing and serialization
extern fn parse_json(json_str: str) -> JsonValue
extern fn stringify_json(value: JsonValue) -> str
extern fn stringify_json_pretty(value: JsonValue, indent: i32) -> str

// Object operations
extern fn json_get(obj: JsonValue, key: str) -> Option<JsonValue>
extern fn json_set(obj: JsonValue, key: str, value: JsonValue) -> JsonValue
extern fn json_has_key(obj: JsonValue, key: str) -> bool
extern fn json_keys(obj: JsonValue) -> str[]

// Array operations
extern fn json_array_length(arr: JsonValue) -> i32
extern fn json_array_get(arr: JsonValue, index: i32) -> Option<JsonValue>
extern fn json_array_push(arr: JsonValue, value: JsonValue) -> JsonValue

// Query functions for JSON values

export fn is_null(value: JsonValue) -> bool =
  match value
    | JsonNull => true
    | _ => false

export fn is_bool(value: JsonValue) -> bool =
  match value
    | JsonBool(_) => true
    | _ => false

export fn is_number(value: JsonValue) -> bool =
  match value
    | JsonNumber(_) => true
    | _ => false

export fn is_string(value: JsonValue) -> bool =
  match value
    | JsonString(_) => true
    | _ => false

export fn is_array(value: JsonValue) -> bool =
  match value
    | JsonArray(_) => true
    | _ => false

export fn is_object(value: JsonValue) -> bool =
  match value
    | JsonObject(_, _) => true
    | _ => false

// Value extraction with Option

export fn as_bool(value: JsonValue) -> Option<bool> =
  match value
    | JsonBool(b) => Some(b)
    | _ => None

export fn as_number(value: JsonValue) -> Option<f32> =
  match value
    | JsonNumber(n) => Some(n)
    | _ => None

export fn as_string(value: JsonValue) -> Option<str> =
  match value
    | JsonString(s) => Some(s)
    | _ => None

export fn as_array(value: JsonValue) -> Option<JsonValue[]> =
  match value
    | JsonArray(arr) => Some(arr)
    | _ => None

// Helper constructors

export fn json_null() -> JsonValue =
  JsonNull

export fn json_bool(b: bool) -> JsonValue =
  JsonBool(b)

export fn json_number(n: f32) -> JsonValue =
  JsonNumber(n)

export fn json_string(s: str) -> JsonValue =
  JsonString(s)

export fn json_array(arr: JsonValue[]) -> JsonValue =
  JsonArray(arr)
